// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           Int              @id @default(autoincrement())
  nome         String
  email        String           @unique
  senha        String
  tipo         TipoUsuario
  dataCadastro DateTime         @default(now())
  planoId      Int?
  plano        Plano?           @relation(fields: [planoId], references: [id])
  turmas       Turma[]          @relation("AlunosTurmas")
  parcerias    Parceria[]
  progresso    ProgressoAluno[]
  Turma        Turma[]
  AlunoTurma   AlunoTurma[]
}

model Plano {
  id        Int       @id @default(autoincrement())
  nome      String
  descricao String?
  usuarios  Usuario[] @relation
}

model Curso {
  id           Int      @id @default(autoincrement())
  titulo       String
  descricao    String
  categoria    String
  cargaHoraria Int
  turmas       Turma[]
  modulos      Modulo[]
}

model Turma {
  id          Int          @id @default(autoincrement())
  nome        String
  cursoId     Int
  professorId Int
  dataInicio  DateTime
  dataFim     DateTime
  curso       Curso        @relation(fields: [cursoId], references: [id])
  professor   Usuario      @relation(fields: [professorId], references: [id])
  alunos      Usuario[]    @relation("AlunosTurmas")
  AlunoTurma  AlunoTurma[]
}

model AlunoTurma {
  alunoId Int
  turmaId Int
  aluno   Usuario @relation(fields: [alunoId], references: [id])
  turma   Turma   @relation(fields: [turmaId], references: [id])

  @@id([alunoId, turmaId])
}

model Modulo {
  id         Int         @id @default(autoincrement())
  cursoId    Int
  titulo     String
  ordem      Int
  curso      Curso       @relation(fields: [cursoId], references: [id])
  videos     Video[]
  apostilas  Apostila[]
  avaliacoes Avaliacao[]
}

model Video {
  id        Int              @id @default(autoincrement())
  moduloId  Int
  titulo    String
  urlVideo  String
  duracao   Int
  modulo    Modulo           @relation(fields: [moduloId], references: [id])
  progresso ProgressoAluno[]
}

model Apostila {
  id         Int              @id @default(autoincrement())
  moduloId   Int
  titulo     String
  arquivoUrl String
  modulo     Modulo           @relation(fields: [moduloId], references: [id])
  progresso  ProgressoAluno[]
}

model Avaliacao {
  id        Int              @id @default(autoincrement())
  moduloId  Int
  titulo    String
  descricao String
  modulo    Modulo           @relation(fields: [moduloId], references: [id])
  progresso ProgressoAluno[]
}

model ProgressoAluno {
  alunoId             Int
  videoId             Int
  apostilaId          Int
  avaliacaoId         Int
  progressoVideo      Int // em %
  baixouApostila      Boolean
  notaAvaliacao       Decimal
  dataUltimaInteracao DateTime
  aluno               Usuario   @relation(fields: [alunoId], references: [id])
  video               Video     @relation(fields: [videoId], references: [id])
  apostila            Apostila  @relation(fields: [apostilaId], references: [id])
  avaliacao           Avaliacao @relation(fields: [avaliacaoId], references: [id])

  @@id([alunoId, videoId, apostilaId, avaliacaoId])
}

model Parceria {
  id                   Int      @id @default(autoincrement())
  alunoId              Int
  descricaoProjeto     String
  percentualPlataforma Decimal
  dataAssinatura       DateTime
  contratoUrl          String
  aluno                Usuario  @relation(fields: [alunoId], references: [id])
}

enum TipoUsuario {
  aluno
  professor
  admin
}
